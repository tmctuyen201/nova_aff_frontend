import React, { useState, useEffect } from "react";
import "./CampaignRegistrationModal.css";

const CampaignRegistrationModal = ({ isOpen, onClose, campaign = null }) => {
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    phone: "",
    zalo: "",
    tiktokLink: "",
    tiktokId: "",
    followers: "",
    gmv: "",
    contentType: "",
    productChoice: "",
    address: "",
    joinZaloGroup: "",
  });

  const [focusedField, setFocusedField] = useState(null);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
      // Scroll modal content to top when opened
      setTimeout(() => {
        const modalContent = document.querySelector(".modal-content");
        if (modalContent) {
          modalContent.scrollTop = 0;
        }
      }, 100);
    } else {
      document.body.style.overflow = "unset";
    }
    return () => {
      document.body.style.overflow = "unset";
    };
  }, [isOpen]);

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors((prev) => ({
        ...prev,
        [field]: "",
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.fullName.trim()) newErrors.fullName = "H·ªç v√† t√™n l√† b·∫Øt bu·ªôc";
    if (!formData.email.trim()) newErrors.email = "Email l√† b·∫Øt bu·ªôc";
    if (!formData.phone.trim()) newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc";
    if (!formData.zalo.trim()) newErrors.zalo = "Zalo l√† b·∫Øt bu·ªôc";
    if (!formData.tiktokLink.trim())
      newErrors.tiktokLink = "Link TikTok l√† b·∫Øt bu·ªôc";
    if (!formData.tiktokId.trim()) newErrors.tiktokId = "ID TikTok l√† b·∫Øt bu·ªôc";
    if (!formData.followers.trim())
      newErrors.followers = "S·ªë follower l√† b·∫Øt bu·ªôc";
    if (!formData.gmv.trim()) newErrors.gmv = "GMV l√† b·∫Øt bu·ªôc";
    if (!formData.contentType.trim())
      newErrors.contentType = "ƒê·∫∑c ƒëi·ªÉm n·ªôi dung l√† b·∫Øt bu·ªôc";
    if (!formData.productChoice.trim())
      newErrors.productChoice = "L·ª±a ch·ªçn s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc";
    if (!formData.address.trim()) newErrors.address = "ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc";
    if (!formData.joinZaloGroup.trim())
      newErrors.joinZaloGroup = "X√°c nh·∫≠n tham gia nh√≥m Zalo l√† b·∫Øt bu·ªôc";

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (formData.email && !emailRegex.test(formData.email)) {
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá";
    }

    // Phone validation
    const phoneRegex = /^[0-9]{10,11}$/;
    if (formData.phone && !phoneRegex.test(formData.phone)) {
      newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // TODO: Submit form data to API
      console.log("Form submitted:", formData);

      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Close modal on success
      onClose();

      // Reset form
      setFormData({
        fullName: "",
        email: "",
        phone: "",
        zalo: "",
        tiktokLink: "",
        tiktokId: "",
        followers: "",
        gmv: "",
        contentType: "",
        productChoice: "",
        address: "",
        joinZaloGroup: "",
      });
    } catch (error) {
      console.error("Error submitting form:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  const closeIcon = (
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
      <path
        d="M18 6L6 18M6 6L18 18"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );

  const FormField = ({
    field,
    label,
    type = "text",
    placeholder = "Short answer text",
    isTextarea = false,
    rows = 3,
  }) => (
    <div className="form-field">
      <div className="field-container">
        <div className="field-header">
          <label className="field-label">* {label}</label>
        </div>

        {isTextarea ? (
          <textarea
            value={formData[field]}
            onChange={(e) => handleInputChange(field, e.target.value)}
            onFocus={() => setFocusedField(field)}
            onBlur={() => setFocusedField(null)}
            placeholder={placeholder}
            rows={rows}
            className={`field-input textarea ${errors[field] ? "error" : ""} ${
              focusedField === field ? "focused" : ""
            }`}
          />
        ) : (
          <input
            type={type}
            value={formData[field]}
            onChange={(e) => handleInputChange(field, e.target.value)}
            onFocus={() => setFocusedField(field)}
            onBlur={() => setFocusedField(null)}
            placeholder={placeholder}
            className={`field-input ${errors[field] ? "error" : ""} ${
              focusedField === field ? "focused" : ""
            }`}
          />
        )}

        {errors[field] && <div className="field-error">{errors[field]}</div>}
      </div>
    </div>
  );

  if (!isOpen) return null;

  return (
    <div className="campaign-registration-modal" onClick={handleBackdropClick}>
      <div className="modal-content">
        <button className="close-button" onClick={onClose}>
          {closeIcon}
        </button>

        <div className="modal-header">
          <div className="header-decoration">
            <div className="decoration-circle circle-1"></div>
            <div className="decoration-circle circle-2"></div>
            <div className="decoration-circle circle-3"></div>
            <div className="decoration-circle circle-4"></div>
            <div className="decoration-circle circle-5"></div>
          </div>

          <h1 className="modal-title">
            {campaign?.brand || "GREENBOX"} ‚Äì M·ªúI KOCs H·ª¢P T√ÅC
            <br />
            AFFILIATE Chi·∫øn d·ªãch "{campaign?.title || "GI·∫¢M GI√Å M√ôA THU 2025"}"
          </h1>

          <p className="modal-description">
            C∆° h·ªôi h·ª£p t√°c Affiliate b√πng n·ªï c√πng chi·∫øn d·ªãch khuy·∫øn m√£i Gi·∫£m Gi√°
            M√πa Thu 2025 ‚Äì ∆∞u ƒë√£i h·∫•p d·∫´n l√™n ƒë·∫øn 50% cho h√†ng trƒÉm s·∫£n ph·∫©m
            th·ªùi trang, m·ªπ ph·∫©m, gia d·ª•ng v√† th·ª±c ph·∫©m s·∫°ch. ƒê√¢y l√† th·ªùi ƒëi·ªÉm
            v√†ng ƒë·ªÉ gi·ªõi thi·ªáu s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng v·ªõi m·ª©c gi√° ∆∞u ƒë√£i, thu h√∫t
            kh√°ch h√†ng m·ªõi v√† gia tƒÉng ƒë∆°n h√†ng cho c·ªông t√°c vi√™n.
          </p>

          <div className="benefits-section">
            <h3>Quy·ªÅn l·ª£i tham gia</h3>
            <div className="benefits-list">
              <p>
                üå∏ Nh·∫≠n ngay 01 m√£ gi·∫£m gi√° c√° nh√¢n tr·ªã gi√° 200.000ƒë ƒë·ªÉ mua s·∫Øm.
              </p>
              <p>
                üå∏ Hoa h·ªìng Affiliate l√™n ƒë·∫øn 12% cho m·ªói ƒë∆°n h√†ng th√†nh c√¥ng.
              </p>
              <p>
                üå∏ C∆° h·ªôi tham gia ch∆∞∆°ng tr√¨nh quay s·ªë tr√∫ng th∆∞·ªüng cu·ªëi m√πa
                v·ªõi t·ªïng gi√° tr·ªã qu√† t·∫∑ng 50.000.000ƒë.
              </p>
            </div>
          </div>

          <div className="conditions-section">
            <h3>ƒêi·ªÅu ki·ªán tham gia</h3>
            <div className="conditions-list">
              <p>
                L√† KOC, Influencer ho·∫∑c Affiliate Marketer c√≥ k√™nh truy·ªÅn th√¥ng
                (Facebook, TikTok, Instagram, Blog...).
              </p>
              <p>
                Cam k·∫øt chia s·∫ª th√¥ng tin chi·∫øn d·ªãch √≠t nh·∫•t 2 l·∫ßn/tu·∫ßn trong
                th·ªùi gian khuy·∫øn m√£i.
              </p>
              <p>Th·ªùi gian chi·∫øn d·ªãch: 01/09/2025 ‚Äì 30/09/2025.</p>
            </div>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="registration-form">
          <div className="form-grid">
            <FormField
              field="fullName"
              label="H·ªç v√† t√™n"
              placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
            />

            <FormField
              field="email"
              label="Email"
              type="email"
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
            />

            <FormField
              field="phone"
              label="S·ªë ƒëi·ªán tho·∫°i"
              type="tel"
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
            />

            <FormField
              field="zalo"
              label="Zalo (S·ªë ƒëƒÉng k√Ω zalo)"
              placeholder="Nh·∫≠p s·ªë Zalo"
            />

            <FormField
              field="tiktokLink"
              label="Link k√™nh TikTok g·∫Øn Affiliate"
              placeholder="Nh·∫≠p link TikTok"
            />

            <FormField
              field="tiktokId"
              label="ID k√™nh Tiktok c·ªßa b·∫°n"
              placeholder="Nh·∫≠p ID TikTok"
            />

            <FormField
              field="followers"
              label="S·ªë l∆∞·ª£ng follower TikTok hi·ªán t·∫°i"
              placeholder="Nh·∫≠p s·ªë follower"
            />

            <FormField
              field="gmv"
              label="GMV k√™nh trong 30 ng√†y g·∫ßn nh·∫•t c·ªßa b·∫°n?"
              placeholder="Nh·∫≠p GMV"
            />

            <FormField
              field="contentType"
              label="ƒê·∫∑c ƒëi·ªÉm n·ªôi dung k√™nh"
              placeholder="M√¥ t·∫£ ƒë·∫∑c ƒëi·ªÉm n·ªôi dung"
              isTextarea={true}
            />

            <FormField
              field="productChoice"
              label="S·∫£n ph·∫©m KOC l·ª±a ch·ªçn"
              placeholder="Nh·∫≠p s·∫£n ph·∫©m b·∫°n quan t√¢m"
            />

            <FormField
              field="address"
              label="ƒê·ªãa ch·ªâ nh·∫≠n s·∫£n ph·∫©m m·∫´u (Ghi r√µ r√†ng, ch√≠nh x√°c)"
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß"
              isTextarea={true}
              rows={4}
            />

            <FormField
              field="joinZaloGroup"
              label="Tham gia nh√≥m ZALO ƒë·ªÉ c·∫≠p nh·∫≠t c√°c th√¥ng tin m·ªõi nh·∫•t"
              placeholder="X√°c nh·∫≠n tham gia nh√≥m Zalo"
            />
          </div>

          <div className="form-actions">
            <button
              type="button"
              onClick={onClose}
              className="cancel-button"
              disabled={isSubmitting}
            >
              H·ªßy b·ªè
            </button>
            <button
              type="submit"
              className={`submit-button ${isSubmitting ? "submitting" : ""}`}
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <div className="loading-spinner"></div>
                  ƒêang g·ª≠i...
                </>
              ) : (
                "ƒêƒÉng k√Ω tham gia"
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CampaignRegistrationModal;
